package main

import (
        "database/sql"
        "fmt"
        "log"
        "os"
        "strconv"
        "strings"
        "time"

        tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
        _ "github.com/lib/pq"
)

type Team struct {
        ID       int
        Name     string
        IsActive bool
}

type TeamMember struct {
        ID             int
        Name           string
        Birthday       time.Time
        TeamID         int
        TeamName       string
        PhoneNumber    string
        TelegramChatID int64
}

type YearTask struct {
        ID                 int
        Year              int
        IsMembersNotified bool
        IsTeamleadNotified bool
        IsMoneyTransfered  bool
}

type Action struct {
        ID           int
        TaskID       int
        TeamMemberID int
        Type         string // "request" or "payout"
        IsDone       bool
        MemberName   string
}

type TeamLead struct {
        ID           int
        TeamMemberID int
        TeamID       int
        PhoneNumber  string
        MemberName   string
        TeamName     string
}

type UserState struct {
        Stage       string // "awaiting_name", "awaiting_birthday", "awaiting_phone", "awaiting_team"
        Name        string
        Birthday    time.Time
        PhoneNumber string
}

var userStates = make(map[int64]*UserState)

func main() {
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        log.Printf("Starting bot...")
        log.Printf("Environment variables:")
        log.Printf("DATABASE_URL: %s", os.Getenv("DATABASE_URL"))
        log.Printf("TELEGRAM_BOT_TOKEN: %s", os.Getenv("TELEGRAM_BOT_TOKEN"))

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connStr := os.Getenv("DATABASE_URL")
        if connStr == "" {
                log.Fatal("DATABASE_URL environment variable is not set")
        }

        db, err := sql.Open("postgres", connStr)
        if err != nil {
                log.Fatal(err)
        }
        defer db.Close()

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        err = db.Ping()
        if err != nil {
                log.Fatal(err)
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–æ—Å–∫–≤—ã
        loc, err := time.LoadLocation("Europe/Moscow")
        if err != nil {
                log.Fatal(err)
        }
        time.Local = loc

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_BOT_TOKEN"))
        if err != nil {
                log.Fatal(err)
        }

        log.Printf("Authorized on account %s", bot.Self.UserName)

        u := tgbotapi.NewUpdate(0)
        u.Timeout = 60

        updates := bot.GetUpdatesChan(u)

        // –ó–∞–ø—É—Å–∫ –≥–æ—Ä—É—Ç–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è actions
        go checkUpcomingBirthdays(db)
        go createRequestActions(db)
        go sendNotifications(db, bot)
        go sendBirthdayWishes(db, bot)
        go sendPayoutReminders(db, bot)

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        for update := range updates {
                if update.Message != nil {
                        handleMessage(bot, db, update.Message)
                } else if update.CallbackQuery != nil {
                        handleCallback(bot, db, update.CallbackQuery)
                }
        }
}

func handleMessage(bot *tgbotapi.BotAPI, db *sql.DB, message *tgbotapi.Message) {
        userID := message.From.ID
        chatID := message.Chat.ID

        if message.IsCommand() {
                switch message.Command() {
                case "start":
                        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                        userStates[userID] = &UserState{Stage: "awaiting_name"}
                        msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
                        bot.Send(msg)
                        return
                case "help":
                        msg := tgbotapi.NewMessage(chatID, `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
/birthdays - –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤)
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
                        bot.Send(msg)
                        return
                case "teamleads":
                        teamLeads, err := getTeamLeads(db)
                        if err != nil {
                                log.Printf("Error getting team leads: %v", err)
                                msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–º–ª–∏–¥–æ–≤")
                                bot.Send(msg)
                                return
                        }
                        msg := tgbotapi.NewMessage(chatID, formatTeamLeadsMessage(teamLeads))
                        bot.Send(msg)
                        return
                case "birthdays":
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∏–º–ª–∏–¥–æ–º
                        var isTeamLead bool
                        err := db.QueryRow(`
                                SELECT EXISTS(
                                        SELECT 1 FROM teamleads 
                                        WHERE team_member_id IN (
                                                SELECT id FROM team_members 
                                                WHERE name = $1
                                        )
                                )`, message.From.UserName).Scan(&isTeamLead)
                        if err != nil {
                                log.Printf("Error checking team lead status: %v", err)
                                return
                        }
                        if !isTeamLead {
                                msg := tgbotapi.NewMessage(chatID, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–º–ª–∏–¥–æ–≤.")
                                bot.Send(msg)
                                return
                        }

                        birthdays, err := getUpcomingBirthdays(db)
                        if err != nil {
                                log.Printf("Error getting birthdays: %v", err)
                                return
                        }
                        msg := tgbotapi.NewMessage(chatID, formatBirthdayMessage(birthdays))
                        bot.Send(msg)
                        return
                }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state, exists := userStates[userID]
        if !exists {
                msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                bot.Send(msg)
                return
        }

        switch state.Stage {
        case "awaiting_name":
                state.Name = message.Text
                state.Stage = "awaiting_birthday"
                msg := tgbotapi.NewMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY")
                bot.Send(msg)

        case "awaiting_birthday":
                birthday, err := time.Parse("02.01.2006", message.Text)
                if err != nil {
                        msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY")
                        bot.Send(msg)
                        return
                }

                state.Birthday = birthday
                state.Stage = "awaiting_phone"

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                keyboard := tgbotapi.NewReplyKeyboard(
                        tgbotapi.NewKeyboardButtonRow(
                                tgbotapi.NewKeyboardButtonContact("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
                        ),
                )
                keyboard.OneTimeKeyboard = true // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

                msg := tgbotapi.NewMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                msg.ReplyMarkup = keyboard
                bot.Send(msg)
                return

        case "awaiting_phone":
                var msg tgbotapi.MessageConfig
                var err error
                var teams []Team

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.Contact == nil {
                        msg = tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞")
                        bot.Send(msg)
                        return
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if message.Contact.UserID != message.From.ID {
                        msg = tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                        bot.Send(msg)
                        return
                }

                state.PhoneNumber = message.Contact.PhoneNumber
                state.Stage = "awaiting_team"

                // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
                msg = tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É")
                msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
                bot.Send(msg)

                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
                teams, err = getActiveTeams(db)
                if err != nil {
                        log.Printf("Error getting teams: %v", err)
                        msg = tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
                        bot.Send(msg)
                        return
                }

                msg = tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É:")
                var buttons [][]tgbotapi.InlineKeyboardButton
                for _, team := range teams {
                        button := tgbotapi.NewInlineKeyboardButtonData(team.Name, fmt.Sprintf("team_%d", team.ID))
                        buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
                }
                msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
                bot.Send(msg)
        }
}

func handleCallback(bot *tgbotapi.BotAPI, db *sql.DB, callback *tgbotapi.CallbackQuery) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø callback
        if strings.HasPrefix(callback.Data, "team_") {
                handleTeamSelection(bot, db, callback)
        } else if strings.HasPrefix(callback.Data, "transfer_done_") {
                handleTransferConfirmation(bot, db, callback)
        } else if strings.HasPrefix(callback.Data, "payout_done_") {
                handlePayoutConfirmation(bot, db, callback)
        }
}

func handleTeamSelection(bot *tgbotapi.BotAPI, db *sql.DB, callback *tgbotapi.CallbackQuery) {
        userID := callback.From.ID
        state, exists := userStates[userID]
        if !exists || state.Stage != "awaiting_team" {
                return
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–º–∞–Ω–¥—ã –∏–∑ callback data
        parts := strings.Split(callback.Data, "_")
        if len(parts) != 2 {
                return
        }

        teamID, err := strconv.Atoi(parts[1])
        if err != nil {
                return
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        err = addBirthday(db, state.Name, state.Birthday, state.PhoneNumber, teamID, callback.Message.Chat.ID)
        if err != nil {
                log.Printf("Error adding birthday: %v", err)
                msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                bot.Send(msg)
                return
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã!")
        bot.Send(msg)

        // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        edit := tgbotapi.NewEditMessageReplyMarkup(
                callback.Message.Chat.ID,
                callback.Message.MessageID,
                tgbotapi.InlineKeyboardMarkup{})
        bot.Send(edit)

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete(userStates, userID)
}

func checkUpcomingBirthdays(db *sql.DB) {
        for {
                // –ñ–¥–µ–º –¥–æ 00:01 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                now := time.Now()
                next := time.Date(now.Year(), now.Month(), now.Day(), 0, 1, 0, 0, time.Local)
                if now.After(next) {
                        next = next.Add(24 * time.Hour)
                }
                time.Sleep(time.Until(next))

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è
                query := `
                        WITH birthday_dates AS (
                                SELECT 
                                        id,
                                        birthday,
                                        (CASE 
                                                WHEN (birthday + ((EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birthday))::integer * INTERVAL '1 year')) < CURRENT_DATE
                                                THEN (birthday + ((EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birthday) + 1)::integer * INTERVAL '1 year'))
                                                ELSE (birthday + ((EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birthday))::integer * INTERVAL '1 year'))
                                        END) as next_birthday
                                FROM team_members
                        )
                        SELECT 
                                m.id
                        FROM team_members m
                        JOIN birthday_dates bd ON m.id = bd.id
                        LEFT JOIN year_tasks yt ON 
                                yt.team_member_id = m.id AND 
                                yt.year = EXTRACT(YEAR FROM bd.next_birthday)::integer
                        WHERE bd.next_birthday = CURRENT_DATE + INTERVAL '3 days'
                        AND yt.id IS NULL`

                rows, err := db.Query(query)
                if err != nil {
                        log.Printf("Error checking upcoming birthdays: %v", err)
                        continue
                }

                currentYear := time.Now().Year()
                for rows.Next() {
                        var memberID int
                        if err := rows.Scan(&memberID); err != nil {
                                log.Printf("Error scanning member ID: %v", err)
                                continue
                        }

                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                        _, err = db.Exec(`
                                INSERT INTO year_tasks (year, team_member_id)
                                VALUES ($1, $2)`,
                                currentYear, memberID)
                        if err != nil {
                                log.Printf("Error creating year task for member %d: %v", memberID, err)
                        }
                }
                rows.Close()
        }
}

func getTodaysBirthdays(db *sql.DB) ([]TeamMember, error) {
        query := `
                SELECT m.id, m.name, m.birthday, m.team_id, t.name as team_name
                FROM team_members m
                JOIN teams t ON m.team_id = t.id
                WHERE t.is_active = true
                AND EXTRACT(MONTH FROM birthday) = EXTRACT(MONTH FROM CURRENT_DATE)
                AND EXTRACT(DAY FROM birthday) = EXTRACT(DAY FROM CURRENT_DATE)`

        return queryBirthdays(db, query)
}

func getUpcomingBirthdays(db *sql.DB) ([]TeamMember, error) {
        query := `
                WITH birthday_dates AS (
                        SELECT 
                                id,
                                birthday,
                                (CASE 
                                        WHEN (birthday + ((EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birthday))::integer * INTERVAL '1 year')) < CURRENT_DATE
                                        THEN (birthday + ((EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birthday) + 1)::integer * INTERVAL '1 year'))
                                        ELSE (birthday + ((EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birthday))::integer * INTERVAL '1 year'))
                                END) as next_birthday
                        FROM team_members
                )
                SELECT 
                        m.id, 
                        m.name, 
                        m.birthday, 
                        m.team_id, 
                        m.phone_number,
                        t.name as team_name
                FROM team_members m
                JOIN teams t ON m.team_id = t.id
                JOIN birthday_dates bd ON m.id = bd.id
                WHERE t.is_active = true
                AND bd.next_birthday <= CURRENT_DATE + INTERVAL '30 days'
                AND bd.next_birthday >= CURRENT_DATE
                ORDER BY bd.next_birthday`

        return queryBirthdays(db, query)
}

func queryBirthdays(db *sql.DB, query string) ([]TeamMember, error) {
        rows, err := db.Query(query)
        if err != nil {
                return nil, err
        }
        defer rows.Close()

        var birthdays []TeamMember
        for rows.Next() {
                var member TeamMember
                err := rows.Scan(&member.ID, &member.Name, &member.Birthday, &member.TeamID, &member.TeamName)
                if err != nil {
                        return nil, err
                }
                birthdays = append(birthdays, member)
        }

        return birthdays, nil
}

func getActiveTeams(db *sql.DB) ([]Team, error) {
        query := `
                SELECT id, name, is_active
                FROM teams
                WHERE is_active = true
                ORDER BY name`

        rows, err := db.Query(query)
        if err != nil {
                return nil, err
        }
        defer rows.Close()

        var teams []Team
        for rows.Next() {
                var team Team
                err := rows.Scan(&team.ID, &team.Name, &team.IsActive)
                if err != nil {
                        return nil, err
                }
                teams = append(teams, team)
        }

        return teams, nil
}

func formatBirthdayMessage(birthdays []TeamMember) string {
        if len(birthdays) == 0 {
                return "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."
        }

        msg := "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
        for _, member := range birthdays {
                msg += fmt.Sprintf("%s (–ö–æ–º–∞–Ω–¥–∞: %s) - %s\n",
                        member.Name,
                        member.TeamName,
                        member.Birthday.Format("02.01.2006"))
        }
        return msg
}

func addBirthday(db *sql.DB, name string, birthday time.Time, phoneNumber string, teamID int, telegramChatID int64) error {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        var exists bool
        err := db.QueryRow("SELECT EXISTS(SELECT 1 FROM teams WHERE id = $1 AND is_active = true)", teamID).Scan(&exists)
        if err != nil {
                return err
        }
        if !exists {
                return fmt.Errorf("–∫–æ–º–∞–Ω–¥–∞ —Å ID %d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", teamID)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        _, err = db.Exec(`
                INSERT INTO team_members (name, birthday, phone_number, team_id, telegram_chat_id)
                VALUES ($1, $2, $3, $4, $5)`,
                name, birthday, phoneNumber, teamID, telegramChatID)
        return err
}

func getTeamLeads(db *sql.DB) ([]TeamLead, error) {
        query := `
                SELECT 
                        tl.id,
                        tl.team_member_id,
                        tl.team_id,
                        tl.phone_number,
                        tm.name as member_name,
                        t.name as team_name
                FROM teamleads tl
                JOIN team_members tm ON tl.team_member_id = tm.id
                JOIN teams t ON tl.team_id = t.id
                WHERE t.is_active = true
                ORDER BY t.name, tm.name`

        rows, err := db.Query(query)
        if err != nil {
                return nil, err
        }
        defer rows.Close()

        var teamLeads []TeamLead
        for rows.Next() {
                var lead TeamLead
                err := rows.Scan(
                        &lead.ID,
                        &lead.TeamMemberID,
                        &lead.TeamID,
                        &lead.PhoneNumber,
                        &lead.MemberName,
                        &lead.TeamName,
                )
                if err != nil {
                        return nil, err
                }
                teamLeads = append(teamLeads, lead)
        }

        return teamLeads, nil
}

func getTeamLeadByTeamID(db *sql.DB, teamID int) (*TeamLead, error) {
        query := `
                SELECT 
                        tl.id,
                        tl.team_member_id,
                        tl.team_id,
                        tl.phone_number,
                        tm.name as member_name,
                        t.name as team_name
                FROM teamleads tl
                JOIN team_members tm ON tl.team_member_id = tm.id
                JOIN teams t ON tl.team_id = t.id
                WHERE t.is_active = true AND tl.team_id = $1
                LIMIT 1`

        var lead TeamLead
        err := db.QueryRow(query, teamID).Scan(
                &lead.ID,
                &lead.TeamMemberID,
                &lead.TeamID,
                &lead.PhoneNumber,
                &lead.MemberName,
                &lead.TeamName,
        )
        if err == sql.ErrNoRows {
                return nil, nil
        }
        if err != nil {
                return nil, err
        }

        return &lead, nil
}

func addTeamLead(db *sql.DB, teamMemberID, teamID int, phoneNumber string) error {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ team_member
        var exists bool
        err := db.QueryRow("SELECT EXISTS(SELECT 1 FROM team_members WHERE id = $1)", teamMemberID).Scan(&exists)
        if err != nil {
                return err
        }
        if !exists {
                return fmt.Errorf("team member —Å ID %d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", teamMemberID)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ team
        err = db.QueryRow("SELECT EXISTS(SELECT 1 FROM teams WHERE id = $1 AND is_active = true)", teamID).Scan(&exists)
        if err != nil {
                return err
        }
        if !exists {
                return fmt.Errorf("team —Å ID %d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", teamID)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∏–º–ª–∏–¥–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        err = db.QueryRow("SELECT EXISTS(SELECT 1 FROM teamleads WHERE team_id = $1)", teamID).Scan(&exists)
        if err != nil {
                return err
        }
        if exists {
                return fmt.Errorf("–¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å ID %d —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–∏–º–ª–∏–¥", teamID)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–º–ª–∏–¥–∞
        _, err = db.Exec(`
                INSERT INTO teamleads (team_member_id, team_id, phone_number)
                VALUES ($1, $2, $3)`,
                teamMemberID, teamID, phoneNumber)
        return err
}

func updateTeamLeadPhone(db *sql.DB, teamLeadID int, newPhoneNumber string) error {
        result, err := db.Exec(`
                UPDATE teamleads
                SET phone_number = $1
                WHERE id = $2`,
                newPhoneNumber, teamLeadID)
        if err != nil {
                return err
        }

        rowsAffected, err := result.RowsAffected()
        if err != nil {
                return err
        }
        if rowsAffected == 0 {
                return fmt.Errorf("—Ç–∏–º–ª–∏–¥ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", teamLeadID)
        }

        return nil
}

func removeTeamLead(db *sql.DB, teamLeadID int) error {
        result, err := db.Exec("DELETE FROM teamleads WHERE id = $1", teamLeadID)
        if err != nil {
                return err
        }

        rowsAffected, err := result.RowsAffected()
        if err != nil {
                return err
        }
        if rowsAffected == 0 {
                return fmt.Errorf("—Ç–∏–º–ª–∏–¥ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", teamLeadID)
        }

        return nil
}

func createRequestActions(db *sql.DB) {
        for {
                // –ñ–¥–µ–º –¥–æ 00:10 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                now := time.Now()
                next := time.Date(now.Year(), now.Month(), now.Day(), 0, 10, 0, 0, time.Local)
                if now.After(next) {
                        next = next.Add(24 * time.Hour)
                }
                time.Sleep(time.Until(next))

                // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –±–µ–∑ actions —Ç–∏–ø–∞ request
                query := `
                        SELECT yt.id, yt.team_member_id
                        FROM year_tasks yt
                        LEFT JOIN actions a ON a.task_id = yt.id AND a.type = 'request'
                        WHERE a.id IS NULL`

                rows, err := db.Query(query)
                if err != nil {
                        log.Printf("Error querying tasks without actions: %v", err)
                        continue
                }

                for rows.Next() {
                        var taskID, birthdayMemberID int
                        if err := rows.Scan(&taskID, &birthdayMemberID); err != nil {
                                log.Printf("Error scanning task: %v", err)
                                continue
                        }

                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞
                        memberRows, err := db.Query(`
                                SELECT id 
                                FROM team_members 
                                WHERE id != $1`,
                                birthdayMemberID)
                        if err != nil {
                                log.Printf("Error getting team members: %v", err)
                                continue
                        }

                        // –°–æ–∑–¥–∞–µ–º actions –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
                        for memberRows.Next() {
                                var memberID int
                                if err := memberRows.Scan(&memberID); err != nil {
                                        log.Printf("Error scanning member: %v", err)
                                        continue
                                }

                                _, err = db.Exec(`
                                        INSERT INTO actions (task_id, team_member_id, type)
                                        VALUES ($1, $2, 'request')`,
                                        taskID, memberID)
                                if err != nil {
                                        log.Printf("Error creating action for member %d: %v", memberID, err)
                                }
                        }
                        memberRows.Close()
                }
                rows.Close()
        }
}

func handleTransferConfirmation(bot *tgbotapi.BotAPI, db *sql.DB, callback *tgbotapi.CallbackQuery) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ callback data
        parts := strings.Split(callback.Data, "_")
        if len(parts) != 3 {
                return
        }

        actionID, err := strconv.Atoi(parts[2])
        if err != nil {
                return
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—è
        err = updateActionStatus(db, actionID, true)
        if err != nil {
                log.Printf("Error updating action status: %v", err)
                return
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–°–ø–∞—Å–∏–±–æ! –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
        bot.Send(msg)

        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        edit := tgbotapi.NewEditMessageReplyMarkup(
                callback.Message.Chat.ID,
                callback.Message.MessageID,
                tgbotapi.InlineKeyboardMarkup{})
        bot.Send(edit)
}

func handlePayoutConfirmation(bot *tgbotapi.BotAPI, db *sql.DB, callback *tgbotapi.CallbackQuery) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–µ–π—Å—Ç–≤–∏—è –∏ –∑–∞–¥–∞—á–∏ –∏–∑ callback data
        parts := strings.Split(callback.Data, "_")
        if len(parts) != 4 {
                return
        }

        actionID, err := strconv.Atoi(parts[2])
        if err != nil {
                return
        }

        taskID, err := strconv.Atoi(parts[3])
        if err != nil {
                return
        }

        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx, err := db.Begin()
        if err != nil {
                log.Printf("Error starting transaction: %v", err)
                return
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—è
        _, err = tx.Exec(`
                UPDATE actions 
                SET is_done = true 
                WHERE id = $1`,
                actionID)
        if err != nil {
                tx.Rollback()
                log.Printf("Error updating action status: %v", err)
                return
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        _, err = tx.Exec(`
                UPDATE year_tasks 
                SET is_money_transfered = true 
                WHERE id = $1`,
                taskID)
        if err != nil {
                tx.Rollback()
                log.Printf("Error updating task status: %v", err)
                return
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        err = tx.Commit()
        if err != nil {
                log.Printf("Error committing transaction: %v", err)
                return
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–°–ø–∞—Å–∏–±–æ! –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É.")
        bot.Send(msg)

        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        edit := tgbotapi.NewEditMessageReplyMarkup(
                callback.Message.Chat.ID,
                callback.Message.MessageID,
                tgbotapi.InlineKeyboardMarkup{})
        bot.Send(edit)
}

func sendNotifications(db *sql.DB, bot *tgbotapi.BotAPI) {
        for {
                now := time.Now()

                // –ñ–¥–µ–º –¥–æ 8:00 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                next := time.Date(now.Year(), now.Month(), now.Day(), 8, 0, 0, 0, time.Local)
                if now.After(next) {
                        next = next.Add(24 * time.Hour)
                }
                time.Sleep(time.Until(next))

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                sendMemberNotifications(db, bot)

                // –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
                time.Sleep(5 * time.Minute)

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–º–ª–∏–¥–∞–º
                sendTeamLeadNotifications(db, bot)
        }
}

func sendMemberNotifications(db *sql.DB, bot *tgbotapi.BotAPI) {
        query := `
                WITH birthday_info AS (
                        SELECT 
                                yt.id as task_id,
                                bm.name as birthday_person_name,
                                t.name as team_name,
                                tl.phone_number as teamlead_phone,
                                tlm.name as teamlead_name
                        FROM year_tasks yt
                        JOIN team_members bm ON yt.team_member_id = bm.id
                        JOIN teams t ON bm.team_id = t.id
                        JOIN teamleads tl ON t.id = tl.team_id
                        JOIN team_members tlm ON tl.team_member_id = tlm.id
                        WHERE yt.is_members_notified = false
                )
                SELECT 
                        a.id as action_id,
                        bi.*,
                        m.telegram_chat_id
                FROM birthday_info bi
                JOIN actions a ON a.task_id = bi.task_id
                JOIN team_members m ON a.team_member_id = m.id
                WHERE a.type = 'request' AND a.is_done = false`

        rows, err := db.Query(query)
        if err != nil {
                log.Printf("Error querying for member notifications: %v", err)
                return
        }
        defer rows.Close()

        for rows.Next() {
                var (
                        actionID        int
                        taskID         int
                        birthdayName   string
                        teamName       string
                        teamleadPhone  string
                        teamleadName   string
                        telegramChatID int64
                )

                err := rows.Scan(&actionID, &taskID, &birthdayName, &teamName, &teamleadPhone, &teamleadName, &telegramChatID)
                if err != nil {
                        log.Printf("Error scanning member notification data: %v", err)
                        continue
                }

                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                keyboard := tgbotapi.NewInlineKeyboardMarkup(
                        tgbotapi.NewInlineKeyboardRow(
                                tgbotapi.NewInlineKeyboardButtonData("–ì–æ—Ç–æ–≤–æ, –ø–µ—Ä–µ–≤–µ–ª", fmt.Sprintf("transfer_done_%d", actionID)),
                        ),
                )

                msg := tgbotapi.NewMessage(telegramChatID,
                        fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç! –ß–µ—Ä–µ–∑ 3 –¥–Ω—è %s –∏–∑ –∫–æ–º–∞–Ω–¥—ã %s –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! "+
                                "–ü–µ—Ä–µ–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞—à–µ–º—É –∫–æ–ª–ª–µ–≥–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ %s, –ø–æ–ª—É—á–∞—Ç–µ–ª—å %s.",
                                birthdayName, teamName, teamleadPhone, teamleadName))
                msg.ReplyMarkup = keyboard

                _, err = bot.Send(msg)
                if err != nil {
                        log.Printf("Error sending member notification: %v", err)
                }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        _, err = db.Exec(`
                UPDATE year_tasks 
                SET is_members_notified = true 
                WHERE is_members_notified = false`)
        if err != nil {
                log.Printf("Error updating members notification status: %v", err)
        }
}

func sendTeamLeadNotifications(db *sql.DB, bot *tgbotapi.BotAPI) {
        query := `
                SELECT 
                        yt.id as task_id,
                        bm.name as birthday_person_name,
                        tlm.telegram_chat_id
                FROM year_tasks yt
                JOIN team_members bm ON yt.team_member_id = bm.id
                JOIN teams t ON bm.team_id = t.id
                JOIN teamleads tl ON t.id = tl.team_id
                JOIN team_members tlm ON tl.team_member_id = tlm.id
                WHERE yt.is_teamlead_notified = false`

        rows, err := db.Query(query)
        if err != nil {
                log.Printf("Error querying for teamlead notifications: %v", err)
                return
        }
        defer rows.Close()

        for rows.Next() {
                var (
                        taskID         int
                        birthdayName   string
                        telegramChatID int64
                )

                err := rows.Scan(&taskID, &birthdayName, &telegramChatID)
                if err != nil {
                        log.Printf("Error scanning teamlead notification data: %v", err)
                        continue
                }

                msg := tgbotapi.NewMessage(telegramChatID,
                        fmt.Sprintf("%s –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è! "+
                                "–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–∞—á–Ω—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –µ–º—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫! "+
                                "–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!", birthdayName))

                _, err = bot.Send(msg)
                if err != nil {
                        log.Printf("Error sending teamlead notification: %v", err)
                        continue
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
                _, err = db.Exec(`
                        UPDATE year_tasks 
                        SET is_teamlead_notified = true 
                        WHERE id = $1`,
                        taskID)
                if err != nil {
                        log.Printf("Error updating teamlead notification status: %v", err)
                }
        }
}

func sendBirthdayWishes(db *sql.DB, bot *tgbotapi.BotAPI) {
        for {
                // –ñ–¥–µ–º –¥–æ 8:10 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                now := time.Now()
                next := time.Date(now.Year(), now.Month(), now.Day(), 8, 10, 0, 0, time.Local)
                if now.After(next) {
                        next = next.Add(24 * time.Hour)
                }
                time.Sleep(time.Until(next))

                // –ù–∞—Ö–æ–¥–∏–º –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
                query := `
                        SELECT 
                                m.id,
                                m.name,
                                m.telegram_chat_id,
                                t.id as team_id,
                                yt.id as task_id,
                                tl.team_member_id as teamlead_id
                        FROM team_members m
                        JOIN teams t ON m.team_id = t.id
                        JOIN teamleads tl ON t.id = tl.team_id
                        LEFT JOIN year_tasks yt ON 
                                yt.team_member_id = m.id AND 
                                yt.year = EXTRACT(YEAR FROM CURRENT_DATE)::integer
                        WHERE EXTRACT(MONTH FROM m.birthday) = EXTRACT(MONTH FROM CURRENT_DATE)
                        AND EXTRACT(DAY FROM m.birthday) = EXTRACT(DAY FROM CURRENT_DATE)`

                rows, err := db.Query(query)
                if err != nil {
                        log.Printf("Error querying birthday people: %v", err)
                        continue
                }

                for rows.Next() {
                        var (
                                memberID       int
                                name          string
                                telegramChatID int64
                                teamID        int
                                taskID        sql.NullInt64
                                teamleadID    int
                        )

                        err := rows.Scan(&memberID, &name, &telegramChatID, &teamID, &taskID, &teamleadID)
                        if err != nil {
                                log.Printf("Error scanning birthday person data: %v", err)
                                continue
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                        msg := tgbotapi.NewMessage(telegramChatID,
                                "–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏, –æ—Ç –∏–º–µ–Ω–∏ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã, "+
                                        "—è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å —ç—Ç–∏–º –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! "+
                                        "–ü—É—Å—Ç—å —Ç–µ–±–µ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—Ç —É—Å–ø–µ—Ö, —É–¥–∞—á–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ!")
                        
                        _, err = bot.Send(msg)
                        if err != nil {
                                log.Printf("Error sending birthday wish: %v", err)
                        }

                        // –°–æ–∑–¥–∞–µ–º action –¥–ª—è —Ç–∏–º–ª–∏–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å task
                        if taskID.Valid {
                                _, err = db.Exec(`
                                        INSERT INTO actions (task_id, team_member_id, type)
                                        VALUES ($1, $2, 'payout')`,
                                        taskID.Int64, teamleadID)
                                if err != nil {
                                        log.Printf("Error creating payout action: %v", err)
                                }
                        }
                }
                rows.Close()
        }
}

func sendPayoutReminders(db *sql.DB, bot *tgbotapi.BotAPI) {
        for {
                // –ñ–¥–µ–º –¥–æ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                now := time.Now()
                next := time.Date(now.Year(), now.Month(), now.Day(), 9, 0, 0, 0, time.Local)
                if now.After(next) {
                        next = next.Add(24 * time.Hour)
                }
                time.Sleep(time.Until(next))

                query := `
                        SELECT 
                                a.id as action_id,
                                tl.telegram_chat_id as teamlead_chat_id,
                                bm.name as birthday_person_name,
                                bm.phone_number as birthday_person_phone,
                                yt.id as task_id
                        FROM actions a
                        JOIN year_tasks yt ON a.task_id = yt.id
                        JOIN team_members bm ON yt.team_member_id = bm.id
                        JOIN team_members tl ON a.team_member_id = tl.id
                        WHERE a.type = 'payout' 
                        AND a.is_done = false
                        AND yt.is_money_transfered = false`

                rows, err := db.Query(query)
                if err != nil {
                        log.Printf("Error querying payout reminders: %v", err)
                        continue
                }

                for rows.Next() {
                        var (
                                actionID           int
                                teamleadChatID     int64
                                birthdayPersonName string
                                birthdayPersonPhone string
                                taskID             int
                        )

                        err := rows.Scan(&actionID, &teamleadChatID, &birthdayPersonName, &birthdayPersonPhone, &taskID)
                        if err != nil {
                                log.Printf("Error scanning payout reminder data: %v", err)
                                continue
                        }

                        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                                tgbotapi.NewInlineKeyboardRow(
                                        tgbotapi.NewInlineKeyboardButtonData("–ì–æ—Ç–æ–≤–æ, –ø–µ—Ä–µ–≤–µ–ª", fmt.Sprintf("payout_done_%d_%d", actionID, taskID)),
                                ),
                        )

                        msg := tgbotapi.NewMessage(teamleadChatID,
                                fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É! "+
                                        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å %s, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ %s",
                                        birthdayPersonName, birthdayPersonPhone))
                        msg.ReplyMarkup = keyboard

                        _, err = bot.Send(msg)
                        if err != nil {
                                log.Printf("Error sending payout reminder: %v", err)
                        }
                }
                rows.Close()
        }
}

func formatTeamLeadsMessage(teamLeads []TeamLead) string {
        if len(teamLeads) == 0 {
                return "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–º–ª–∏–¥–æ–≤."
        }

        msg := "–°–ø–∏—Å–æ–∫ —Ç–∏–º–ª–∏–¥–æ–≤:\n\n"
        for _, lead := range teamLeads {
                msg += fmt.Sprintf("–ö–æ–º–∞–Ω–¥–∞: %s\n–¢–∏–º–ª–∏–¥: %s\n–¢–µ–ª–µ—Ñ–æ–Ω: %s\n\n",
                        lead.TeamName,
                        lead.MemberName,
                        lead.PhoneNumber)
        }
        return msg
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å year_tasks
func createYearTask(db *sql.DB, year int) error {
        _, err := db.Exec(`
                INSERT INTO year_tasks (year)
                VALUES ($1)`,
                year)
        return err
}

func getYearTask(db *sql.DB, year int) (*YearTask, error) {
        var task YearTask
        err := db.QueryRow(`
                SELECT id, year, is_members_notified, is_teamlead_notified, is_money_transfered
                FROM year_tasks
                WHERE year = $1`,
                year).Scan(
                &task.ID,
                &task.Year,
                &task.IsMembersNotified,
                &task.IsTeamleadNotified,
                &task.IsMoneyTransfered)

        if err == sql.ErrNoRows {
                return nil, nil
        }
        if err != nil {
                return nil, err
        }
        return &task, nil
}

func updateYearTaskStatus(db *sql.DB, taskID int, field string, value bool) error {
        query := fmt.Sprintf("UPDATE year_tasks SET %s = $1 WHERE id = $2", field)
        result, err := db.Exec(query, value, taskID)
        if err != nil {
                return err
        }

        rowsAffected, err := result.RowsAffected()
        if err != nil {
                return err
        }
        if rowsAffected == 0 {
                return fmt.Errorf("–∑–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", taskID)
        }
        return nil
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å actions
func createAction(db *sql.DB, taskID, teamMemberID int, actionType string) error {
        _, err := db.Exec(`
                INSERT INTO actions (task_id, team_member_id, type)
                VALUES ($1, $2, $3)`,
                taskID, teamMemberID, actionType)
        return err
}

func getActions(db *sql.DB, taskID int) ([]Action, error) {
        rows, err := db.Query(`
                SELECT a.id, a.task_id, a.team_member_id, a.type, a.is_done, m.name
                FROM actions a
                JOIN team_members m ON a.team_member_id = m.id
                WHERE a.task_id = $1
                ORDER BY a.id`,
                taskID)
        if err != nil {
                return nil, err
        }
        defer rows.Close()

        var actions []Action
        for rows.Next() {
                var action Action
                err := rows.Scan(
                        &action.ID,
                        &action.TaskID,
                        &action.TeamMemberID,
                        &action.Type,
                        &action.IsDone,
                        &action.MemberName)
                if err != nil {
                        return nil, err
                }
                actions = append(actions, action)
        }
        return actions, nil
}

func updateActionStatus(db *sql.DB, actionID int, isDone bool) error {
        result, err := db.Exec(`
                UPDATE actions
                SET is_done = $1
                WHERE id = $2`,
                isDone, actionID)
        if err != nil {
                return err
        }

        rowsAffected, err := result.RowsAffected()
        if err != nil {
                return err
        }
        if rowsAffected == 0 {
                return fmt.Errorf("–¥–µ–π—Å—Ç–≤–∏–µ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", actionID)
        }
        return nil
}

func getActionsByMember(db *sql.DB, teamMemberID int) ([]Action, error) {
        rows, err := db.Query(`
                SELECT a.id, a.task_id, a.team_member_id, a.type, a.is_done, m.name
                FROM actions a
                JOIN team_members m ON a.team_member_id = m.id
                WHERE a.team_member_id = $1
                ORDER BY a.id`,
                teamMemberID)
        if err != nil {
                return nil, err
        }
        defer rows.Close()

        var actions []Action
        for rows.Next() {
                var action Action
                err := rows.Scan(
                        &action.ID,
                        &action.TaskID,
                        &action.TeamMemberID,
                        &action.Type,
                        &action.IsDone,
                        &action.MemberName)
                if err != nil {
                        return nil, err
                }
                actions = append(actions, action)
        }
        return actions, nil
}